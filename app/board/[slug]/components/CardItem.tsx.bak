"use client";
import { useEffect, useId, useMemo, useRef, useState } from "react";
import { Card } from "../../../../lib/types";
import Button from "../../../components/ui/Button";

function PencilIcon() {
  return (
    <svg
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth={1.5}
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-4 w-4"
      aria-hidden="true"
    >
      <path d="m18 2 4 4" />
      <path d="m3 21 1-4 11-11 3 3-11 11-4 1Z" />
      <path d="m12 6 3 3" />
    </svg>
  );
}

function TrashIcon() {
  return (
    <svg
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth={1.5}
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-4 w-4"
      aria-hidden="true"
    >
      <path d="M3 6h18" />
      <path d="m19 6-1 14H6L5 6" />
      <path d="M10 11v6" />
      <path d="M14 11v6" />
      <path d="M9 6V4h6v2" />
    </svg>
  );
}

function CheckIcon() {
  return (
    <svg
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth={1.5}
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-4 w-4"
      aria-hidden="true"
    >
      <path d="M20 6 9 17l-5-5" />
    </svg>
  );
}

function XIcon() {
  return (
    <svg
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth={1.5}
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-4 w-4"
      aria-hidden="true"
    >
      <path d="M18 6 6 18" />
      <path d="M6 6l12 12" />
    </svg>
  );
}

function MoreIcon() {
  return (
    <svg
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth={1.8}
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-5 w-5"
      aria-hidden="true"
    >
      <circle cx="12" cy="6" r="1.5" />
      <circle cx="12" cy="12" r="1.5" />
      <circle cx="12" cy="18" r="1.5" />
    </svg>
  );
}

type Props = {
  card: Card;
  columnId: string;
  columns: Array<{ id: string; name: string }>;
  isMobile: boolean;
  onEdit: (cardId: string, columnId: string, title: string) => void;
  onDelete: (cardId: string, columnId: string) => void;
  onMove: (cardId: string, fromColumnId: string, toColumnId: string) => void;
};

export default function CardItem({
  card,
  columnId,
  columns,
  isMobile,
  onEdit,
  onDelete,
  onMove,
}: Props) {
  const [editing, setEditing] = useState(false);
  const [title, setTitle] = useState(card.title);
  const [actionsOpen, setActionsOpen] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const firstActionRef = useRef<HTMLButtonElement>(null);
  const sheetTitleId = useId();

  const moveTargets = useMemo(
    () => columns.filter((column) => column.id !== columnId),
    [columns, columnId]
  );

  useEffect(() => {
    if (!actionsOpen) return;

    const previousOverflow = document.body.style.overflow;
    document.body.style.overflow = "hidden";

    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        setActionsOpen(false);
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    const timeout = window.setTimeout(() => {
      firstActionRef.current?.focus();
    }, 50);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.clearTimeout(timeout);
      document.body.style.overflow = previousOverflow;
    };
  }, [actionsOpen]);

  function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    const trimmed = title.trim();
    if (trimmed) onEdit(card.id, columnId, trimmed);
    setEditing(false);
    requestAnimationFrame(() => containerRef.current?.focus());
  }

  function handleMove(toColumnId: string) {
    onMove(card.id, columnId, toColumnId);
    setActionsOpen(false);
  }

  function handleDelete() {
    setActionsOpen(false);
    onDelete(card.id, columnId);
  }

  return (
    <>
      <div
        ref={containerRef}
        tabIndex={-1}
        className="border border-slate-200 bg-white p-3 shadow-sm outline-none transition focus:ring-2 focus:ring-blue-400 hover:shadow-md"
      >
        {editing ? (
          <form onSubmit={handleSubmit} className="flex w-full flex-wrap items-center gap-2">
            <input
              autoFocus
              className="min-w-0 flex-1 border border-slate-200 px-2 py-1 text-sm focus:border-blue-400 focus:outline-none"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Escape") {
                  setTitle(card.title);
                  setEditing(false);
                }
              }}
            />
            <Button
              type="submit"
              variant="primary"
              size="sm"
              className="px-0 py-0 shadow-sm"
              aria-label="Save changes"
            >
              <CheckIcon />
              <span className="sr-only">Save changes</span>
            </Button>
            <Button
              variant="secondary"
              size="sm"
              className="px-0 py-0"
              onClick={() => {
                setTitle(card.title);
                setEditing(false);
              }}
              aria-label="Cancel editing"
            >
              <XIcon />
              <span className="sr-only">Cancel editing</span>
            </Button>
          </form>
        ) : (
          <div className="flex items-start justify-between gap-2">
            <div className="whitespace-pre-wrap break-words text-slate-700">{card.title}</div>
            {isMobile ? (
              <Button
                variant="secondary"
                size="sm"
                className="p-1 text-slate-500 hover:bg-slate-100"
                onClick={() => setActionsOpen(true)}
                aria-label="Open quick actions"
              >
                <MoreIcon />
                <span className="sr-only">Open quick actions</span>
              </Button>
            ) : (
              <div className="flex gap-1">
                <Button
                  variant="secondary"
                  size="sm"
                  className="p-1 text-blue-600 hover:bg-blue-50"
                  onClick={() => setEditing(true)}
                  aria-label="Edit card"
                >
                  <PencilIcon />
                  <span className="sr-only">Edit card</span>
                </Button>
                <Button
                  variant="danger"
                  size="sm"
                  className="p-1"
                  onClick={() => onDelete(card.id, columnId)}
                  aria-label="Delete card"
                >
                  <TrashIcon />
                  <span className="sr-only">Delete card</span>
                </Button>
              </div>
            )}
          </div>
        )}
      </div>

      {actionsOpen && (
        <div className="fixed inset-0 z-50">
          <div
            className="absolute inset-0 bg-slate-900/40"
            aria-hidden="true"
            onClick={() => setActionsOpen(false)}
          />
          <div
            className="absolute inset-x-0 bottom-0 flex flex-col rounded-t-2xl bg-white p-4 shadow-xl"
            role="dialog"
            aria-modal="true"
            aria-labelledby={sheetTitleId}
          >
            <div className="mx-auto h-1.5 w-12 rounded-full bg-slate-200" aria-hidden="true" />
            <div className="mt-4 space-y-6">
              <h2 id={sheetTitleId} className="text-base font-semibold text-slate-700">
                Quick actions
              </h2>
              <section>
                <p className="mb-3 text-sm font-medium text-slate-500">Move to column</p>
                <div className="max-h-60 space-y-2 overflow-y-auto">
                  {columns.map((col) => {
                    const isCurrent = col.id === columnId;
                    const isFirstEnabled = !isCurrent && col.id === moveTargets[0]?.id;
                    return (
                      <button
                        key={col.id}
                        type="button"
                        disabled={isCurrent}
                        ref={isFirstEnabled ? firstActionRef : undefined}
                        onClick={() => handleMove(col.id)}
                        className="flex w-full items-center justify-between rounded-lg border border-slate-200 px-4 py-2 text-left text-sm font-medium transition enabled:hover:border-blue-400 enabled:hover:bg-blue-50 disabled:cursor-not-allowed disabled:border-slate-100 disabled:bg-slate-100 disabled:text-slate-400"
                      >
                        <span>{col.name}</span>
                        {isCurrent ? <span className="text-xs text-slate-400">Current</span> : null}
                      </button>
                    );
                  })}
                  {moveTargets.length === 0 && (
                    <p className="text-sm text-slate-400">No other columns available.</p>
                  )}
                </div>
              </section>

              <div className="space-y-2">
                <button
                  type="button"
                  onClick={() => {
                    setActionsOpen(false);
                    setEditing(true);
                    requestAnimationFrame(() => containerRef.current?.focus());
                  }}
                  ref={moveTargets.length === 0 ? firstActionRef : undefined}
                  className="w-full rounded-lg border border-slate-200 px-4 py-2 text-sm font-medium text-slate-600 transition hover:border-blue-400 hover:bg-blue-50"
                >
                  Edit card
                </button>
                <button
                  type="button"
                  onClick={handleDelete}
                  className="w-full rounded-lg border border-red-200 px-4 py-2 text-sm font-medium text-red-600 transition hover:border-red-400 hover:bg-red-50"
                >
                  Delete card
                </button>
              </div>

              <button
                type="button"
                onClick={() => setActionsOpen(false)}
                className="w-full rounded-lg border border-slate-200 px-4 py-2 text-sm font-medium text-slate-600 transition hover:bg-slate-100"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
